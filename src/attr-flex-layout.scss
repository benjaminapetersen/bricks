@import 'variables';
/*
    NAME THIS THING IF IT DOESN'T SUCK
    possibilitie:
        paint the fence
            - layout is defined in attributes, a scaffolding, the 'fence'
            - classes are reserved for the paint job, the theme

    ISSUES
        - no autoprefix
        - autoprefixer
        - data-* on attribute version
        - styles version

    FLEX REFERENCE
        https://css-tricks.com/snippets/css/a-guide-to-flexbox/
        - display
            - set to flex to create a flex container
        - flex-direction
            - establish main axis, default row
        - flex-wrap
            - allow items to wrap to next line or force to fit on single line
            - default: nowrap
        - flex-flow
            - shorthand for flex-direction, flex-wrap combined
        - justify-content
            - align items on main axis
        - align-items
            - flex item laid out along cross axis on the current line
        - align-content
            - align items on cross axis
        - order
            - override source order of layout of children
        - flex-grow
            - ability for flex item to grow, default 1
        - flex-shrink
            - ability for flex item to shrink, default 1
        - flex-basis
            - default size of element before space distributed, default auto
        - flex
            - shorthand for flex-grow, flex-shrink, flex-basis combined
        - align-self
            - overrides the align-items value on parent
*/


/* basic flex attrs
----------------------------------------------- */
 
/* flex container */
[layout] {
    display: flex;
}

/* primary flex child*/
[flex] {
    flex: 1; 
}

/* this is useless right now, 
    but a reminder to look at it later */
[basis],
[basis="auto"] {
    flex-basis: auto; 
}

/* flex-direction is handled in these attrs */
[column] {
    flex-direction: column;
}

[column="reverse"],
[column][reverse] {
    flex-direction: column-reverse;
}

[row] {
    flex-direction: row;
}

[row="reverse"],
[row][reverse] {
    flex-direction: row-reverse;
}

/*  *Experimental*
    - mobile, tablet, laptop, desktop?
----------------------------------------------- */

@media only screen and (min-width: 768px) {
    /* tablets and desktop */
    [tablet="column"] {
        flex-direction: column;
    }
    [tablet="row"] {
        flex-direction: row;
    }
}

@media only screen and (max-width: 767px) {
    /* phones */
    [mobile="column"] {
        flex-direction: column;
    }
    [mobile="row"] {
        flex-direction: row;
    }
}

@media only screen and (max-width: 767px) and (orientation: portrait) {
    /* portrait phones */
    /* hmmmmm.......   */
}


[wrap] {
    flex-wrap: wrap;
}
[wrap][reverse] {
    flex-wrap: wrap-reverse;
}
[no-wrap] {
    flex-wrap: nowrap;
}

/* sizing
----------------------------------------------- */
/* match the parent */
[fit] {
    margin: 0px;
    width: 100%;
    min-height: auto;
    height: inherit; /* 100%? */
}


/* ordering of children
----------------------------------------------- */
/* order="1|2|3" */
@for $i from 0 through 15 {
    [order="#{$i}"] {
        order: $i;
    }
}
/* alt: first, second.... */
[first] {
    order: 1;
}
[second] {
    order: 2;
}
[third] {
    order: 3;
}
[fourth] {
    order: 4;
}
[fifth] {
    order: 5;
}
[sixth] {
    order: 6;
}
[seventh] {
    order: 7;
}
[eigth] {
    order: 8;
}
[ninth] {
    order: 9;
}
[tenth] {
    order: 10;
}
[eleven] {
    order: 11;
}
[twelve] {
    order: 12;
}
[thirteen] {
    order: 13;
}
[fourteen] {
    order: 14;
}
[fifteen] {
    order: 15;
}

/* flex grow
----------------------------------------------- */
@for $i from 0 through 15 {
    [grow="#{$i}"] {
        flex-grow: $i;
    }
}

/* flex shrink
----------------------------------------------- */
@for $i from 0 through 15 {
    [shrink="#{$i}"] {
        flex-shrink: $i;
    }
}

/* resize
    * experimental!
    - is a mashup of grow & shrink
    <div flex resize="5 5">
----------------------------------------------- */
@for $g from 0 through 15 {
    @for $s from 0 through 15 {
       [resize="#{$i} #{$j}"] {
            flex-grow: $g;
            flex-shrink: $s;
        } 
    }  
}

/* main axis only
----------------------------------------------- */
@each $key, $val in $justify-content-map {
    [main-axis="#{$key}"] {
        justify-content: #{$val};
    }  
}

/* cross axis only
----------------------------------------------- */
@each $key, $val in $align-items-map {
    [cross-axis="#{$key}"] {
        align-items: #{$val};
    }  
}

/*  cross axis align only
    TODO: dislike the name.
    - this does nothing if there is a 
    single line of content in the container (spec)
----------------------------------------------- */
@each $key, $val in $align-content-map { 
    [cross-axis-align="#{$key}"] {
        align-content: #{$val};
    }
}

/* EXPERIMENTAL
   align="x y z" shorthand 
   - TODO: how to match only two out of three?
   - point is ease of use, without generating 
     way too much CSS to be worth it. 
     <div flex axis="center center">
     <div flex axis="center center center">
----------------------------------------------- */
/* primary two xis */
@each $jc-key, $jc-val in $justify-content-map {
    @each $ai-key, $ai-val in $align-items-map {    
        [axis="#{$jc-key} #{$ai-key}"] {
            justify-content: #{$jc-val};
            align-items: #{$ai-val};   
        }
    }  
}
/* all three */
@each $jc-key, $jc-val in $justify-content-map {
    @each $ai-key, $ai-val in $align-items-map {
        @each $ac-key, $ac-val in $align-content-map { 
            [axis="#{$jc-key} #{$ai-key} #{$ac-key}"] {
                justify-content: #{$jc-val};
                align-items: #{$ai-val};
                align-content: #{$ac-val};
            }
        }  
    }  
}






